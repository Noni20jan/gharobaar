!function (t) { t.widget("ui.tagger", { options: { availableTags: null, ajaxURL: null, preselectedTags: null, characterThreshold: 1, characterLimit: null, typingTimeThreshold: 200, caseSensitive: !1, placeholder: null, baseURL: "/images/img/", imgDownArrow: "dropdown.png", imgRemove: "remove.png", imgSearch: "search.png", sortedOutput: !1, displayHierarchy: !1, indentMultiplier: 1, tabindexOffset: null, noSuggestText: "No suggestions found", emptyListText: "All items selected already", limitedText: "There are too many results to show, type more characters to filter these results further", searchTooltipText: "Enter text to get suggestions", ajaxErrorFunction: function (t, e) { t._showMessageSuggestion("AJAX Search failed", "error") }, loadingClass: ".tagger-loading", inputExpandExtra: 14, fieldWidth: "30em", fieldHeight: null, suggestWidth: null, suggestMaxWidth: null, suggestMaxHeight: null, mandatorySelection: !1, clearFilterOnBlur: !1, freeTextInput: !1, freeTextPrefix: null, freeTextMessage: null, freeTextSuggest: !1 }, keyCodes: { BACKSPACE: 8, TAB: 9, ENTER: 13, ESC: 27, SPACE: 32, END: 35, HOME: 36, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40 }, mouseCodes: { LEFT: 1, MIDDLE: 2, RIGHT: 3 }, ajaxRequestCount: 0, _create: function () { var e = this; if (this.canFireActions = !1, !this.element.is("select")) throw "Tagger widget only works on select elements"; this.element.data("isTagger", !0), this.readonly = this.element.prop("readonly") || this.element.prop("disabled"), null === this.options.tabindexOffset ? this.element.attr("tabindex") ? this.tabIndex = this.element.attr("tabindex") : this.tabIndex = "0" : this.tabIndex = this.options.tabindexOffset, this.singleValue = !this.element.prop("multiple"), this.tagCount = 0, this.element.hide(), this.singleValue && this.element.on("change", function (t) { var i = void 0 === this.selectedIndex ? window.event.srcElement : this, s = i.value || i.options[i.selectedIndex].value; e._addTagFromID(s) }), this.element.siblings(this.options.loadingClass).remove(); var i = this.element.prop("id"); this.taggerID = "tagger" + i, this.suggestionsListID = "suggestions" + i, this.taggerWidget = t("<div>").addClass("tagger").prop("tabindex", 0).attr("role", "combobox").attr("aria-expanded", "false").attr("aria-autocomplete", "list").attr("aria-owns", this.suggestionsListID).insertAfter(this.element), this.element.attr("aria-label") && this.taggerWidget.attr("aria-label", this.element.attr("aria-label")), t("label[for=" + this.element.prop("id") + "]") && this.taggerWidget.attr("aria-labelledby", t("label[for=" + this.element.prop("id") + "]").first().prop("id")), this.element.attr("aria-required") && this.taggerWidget.attr("aria-required", this.element.attr("aria-required")), this.readonly && this.taggerWidget.addClass("tagger-readonly"), null !== this.options.fieldWidth ? this.taggerWidget.css("width", this.options.fieldWidth) : this.taggerWidget.css("width", this.element.css("width")), null !== this.options.fieldHeight && this.taggerWidget.css("height", this.options.fieldHeight), this.readonly || (this.taggerInput = t("<input>").attr("type", "text").attr("autocomplete", "off").attr("placeholder", "type here").addClass("intxt").attr("role", "textbox").attr("aria-label", "Autocomplete input box").appendTo(this.taggerWidget), this.taggerButtonsPanel = t("<div>").addClass("tagger-buttons"), this.taggerButtonsPanel.appendTo(this.taggerWidget), this.options.ajaxURL ? (this.taggerSuggestionsButton = t("<div>").addClass("search").bind("mouseup keyup", t.proxy(this._handleSuggestionsButtonInteraction, this)).appendTo(this.taggerButtonsPanel), t("<img>").attr("src", this.options.baseURL + this.options.imgSearch).attr("alt", this.options.searchTooltipText).attr("role", "presentation").appendTo(this.taggerSuggestionsButton)) : (this.taggerSuggestionsButton = t("<div>").addClass("droparrow").addClass("hittarget").bind("mouseup keyup", t.proxy(this._handleSuggestionsButtonInteraction, this)).appendTo(this.taggerButtonsPanel), t("<img>").attr("src", this.options.baseURL + this.options.imgDownArrow).attr("alt", "Toggle option display").attr("role", "presentation").appendTo(this.taggerSuggestionsButton)), this.taggerSuggestionsButton.attr("tabindex", this.tabIndex), null !== this.options.placeholder && this.taggerInput.attr("placeholder", this.options.placeholder), null !== this.options.characterLimit && this.taggerInput.attr("maxlength", this.options.characterLimit), this.taggerInput.attr("tabindex", this.tabIndex), this.taggerWidget.bind("keydown", t.proxy(function (t) { t.target && t.which === this.keyCodes.ESC && (this._hideSuggestions(), this._getWidgetFocusable().focus()) }, this)), this.taggerWidget.bind("keypress", t.proxy(this._handleTaggerKeypressRedirect, this))), t("<div>").addClass("clearer").appendTo(this.taggerWidget), this.readonly || (this.taggerSuggestions = t("<div>").addClass("suggestions").appendTo(this.taggerWidget), this.singleValue && (this.taggerFilterInput = t('<input type="text" class="filtertxt" autocomplete="off"/>').appendTo(this.taggerSuggestions), this.taggerFilterInput.attr("tabindex", this.tabIndex), null !== this.options.placeholder && this.taggerFilterInput.attr("placeholder", this.options.placeholder), this.taggerFilterInput.hide()), this.taggerSuggestionsList = t("<ul>").prop("id", this.suggestionsListID).attr("role", "listbox").appendTo(this.taggerSuggestions), t(document.body).bind("mousedown keyup", t.proxy(this._handleDocumentInteraction, this)), t(window).resize(t.proxy(function () { this._setSuggestionListDimensions(this) }, this)), this._inputExpand(this.taggerInput), this.taggerInput.bind("keydown keyup mouseup", t.proxy(this._handleFilterInputInteraction, this)), this.taggerFilterInput && this.taggerFilterInput.bind("keydown keyup mouseup", t.proxy(this._handleFilterInputInteraction, this)), this.element.is(":focus") && (this._focusWidget(), this._getWidgetFocusable().focus()), this.element.focus(t.proxy(function (t) { this._focusWidget(), this._getWidgetFocusable().focus(), t.preventDefault() }, this)), this.element.get(0).focus = t.proxy(function () { this._focusWidget(), this._getWidgetFocusable().focus() }, this), t("label[for=" + this.element.prop("id") + "]").bind("mouseup", t.proxy(function () { this._focusWidget(), this._getWidgetFocusable().focus() }, this))), this.options.availableTags ? this.tagsByID = this.options.availableTags : (this.tagsByID = {}, this.element.children("option").each(t.proxy(function (e, i) { this.tagsByID[t(i).val()] = { id: t(i).val(), key: t(i).text(), hidden: "", level: 0, suggestable: !0, historical: !1, disabled: t(i).prop("disabled"), sort: e, freetext: this.options.freeTextInput && t(i).val().startsWith(this.options.freeTextPrefix) } }, this))); var s = this.options.preselectedTags; if (this.singleValue && this.options.mandatorySelection && null === s && (s = [this.element.children()[0].value]), null === s) this.element.children("option:selected").each(t.proxy(function (e, i) { this.tagsByID[t(i).val()] || (this.tagsByID[t(i).val()] = { id: t(i).val(), key: t(i).text(), suggestion: t(i).text(), hidden: "", level: 0, suggestable: !1, historical: !0, disabled: t(i).prop("disabled"), freetext: this.options.freeTextInput && t(i).val().startsWith(this.options.freeTextPrefix) }), this._addTagFromID(t(i).val()) }, this)); else for (var a = null, n = 0; n < s.length; n++)a = s[n], this.tagsByID[a] || (this.tagsByID[a] = { id: a, key: t('option[value="' + a + '"]', this.element).first().text(), suggestion: "", hidden: "", level: 0, suggestable: !1, historical: !0, disabled: t('option[value="' + a + '"]', this.element).first().prop("disabled"), freetext: this.options.freeTextInput && a.startsWith(this.options.freeTextPrefix) }), this._addTagFromID(a); this.canFireActions = !0 }, _handleFilterInputInteraction: function (e) { var i = t(e.target), s = i.get(0) === this.taggerInput.get(0); switch (e.type) { case "keydown": if (s && this._inputExpand(this.taggerInput), e.target) switch (e.which) { case this.keyCodes.ENTER: 1 === this.taggerSuggestionsList.children("[suggestion=tag]").length ? (this._addTagFromID(this.taggerSuggestionsList.children("[suggestion=tag]").first().data("tagid")), this._selectionReset(!0, !0)) : 0 === this.taggerSuggestionsList.children("[suggestion=tag]").length && this.options.freeTextInput ? (this._addFreeText(i.val()), this._selectionReset(!0, !0)) : this.taggerSuggestionsList.children("[tabindex]").first().focus(), e.preventDefault(); break; case this.keyCodes.BACKSPACE: if (s) if (i.val().length < 1) { var a = t(".tag", this.taggerWidget).last(); a.length > 0 && a.focus(), e.preventDefault() } else i.val().length <= this.options.characterThreshold && this._selectionReset(!0, !1); else i.val().length <= this.options.characterThreshold && this.loadedFiltered && (this.singleValue && this.taggerFilterInput ? this._selectionReset(!1, !1) : (this._selectionReset(!0, !1), this.taggerSuggestionsButton.focus())); break; case this.keyCodes.ESC: this._hideSuggestions(), this._getWidgetFocusable().focus(), e.preventDefault() }break; case "keyup": s && this._inputExpand(this.taggerInput), e.which !== this.keyCodes.ENTER && e.which !== this.keyCodes.DOWN && e.which !== this.keyCodes.ESC ? i.val().length >= this.options.characterThreshold && this._filterSuggestions(i.val(), !1) : e.which === this.keyCodes.DOWN && (s ? this.options.ajaxURL && !this.taggerSuggestions.is(":visible") || this._showSuggestions(!0) : (this.taggerSuggestionsList.children("[tabindex]").first().focus(), e.preventDefault())); break; case "mouseup": this._showSuggestions(this.singleValue && 1 === this.tagCount); break; default: throw "Cannot handle interaction of this type on the filter input: " + e.type + " - " + e.target } }, _handleSuggestionsButtonInteraction: function (t) { ("mouseup" === t.type && t.which === this.mouseCodes.LEFT || "keyup" === t.type && (t.which === this.keyCodes.ENTER || t.which === this.keyCodes.SPACE || t.which === this.keyCodes.DOWN)) && (this.options.ajaxURL ? (this._focusWidget(), this.taggerWidget.find("input[tabindex]:visible").first().focus()) : this.taggerSuggestions.is(":visible") ? this._hideSuggestions() : this._showSuggestions(!0), t.preventDefault()) }, _handleTaggerKeypressRedirect: function (t) { if (0 !== t.which && 0 !== t.charCode && !t.ctrlKey && !t.metaKey && !t.altKey) { if (t.target === this.taggerInput.get(0) || this.taggerFilterInput && t.target === this.taggerFilterInput.get(0)) return; this._appendCharAndFilter(t), t.preventDefault() } }, _handleDocumentInteraction: function (e) { var i = this.taggerWidget.get(0); "mousedown" === e.type ? t(e.target).parents(".tagger").get(0) !== i && e.target !== i ? this._blurWidget() : e.target === i && (this._focusWidget(), this.singleValue && 0 !== this.tagCount || (this.taggerWidget.find("input[tabindex]:visible").first().focus(), e.preventDefault()), setTimeout(t.proxy(function () { this._showSuggestions(this.singleValue && 1 === this.tagCount) }, this), 0)) : "keyup" === e.type && e.which === this.keyCodes.TAB && (t(e.target).parents(".tagger").get(0) !== i ? this._blurWidget() : t(e.target).parents(".tagger").get(0) === i && this._focusWidget()) }, _focusWidget: function () { this.taggerWidget.addClass("focus") }, _blurWidget: function () { this.taggerWidget.removeClass("focus"), this._hideSuggestions(), this.options.clearFilterOnBlur && this.taggerInput.val().length > 0 && (this.taggerInput.addClass("filterCleared"), setTimeout(t.proxy(function () { this.taggerInput.removeClass("filterCleared"), this.taggerInput.val(""), this.taggerFilterInput && this.taggerFilterInput.val(""), this._inputExpand(this.taggerInput), this._loadSuggestions(this.tagsByID, !0), this.loadedFiltered = !1 }, this), 250)) }, filterTags: function (e) { var i = e, s = e.toLowerCase(), a = {}; for (var n in this.tagsByID) if (this.tagsByID.hasOwnProperty(n)) { var g = this.tagsByID[n]; if (!g.suggestable || g.historical) continue; this.options.caseSensitive ? (g.key.indexOf(i) >= 0 || g.hidden && g.hidden.indexOf(i) >= 0 || t("<div/>").html(g.suggestion).text().replace(/<.*?[^>]>/g, "").indexOf(i) >= 0) && (a[n] = t.extend(!0, {}, g), a[n].suggestable = !0) : (g.key.toLowerCase().indexOf(s) >= 0 || g.hidden && g.hidden.toLowerCase().indexOf(s) >= 0 || t("<div/>").html(g.suggestion).text().replace(/<.*?[^>]>/g, "").toLowerCase().indexOf(s) >= 0) && (a[n] = t.extend(!0, {}, g), a[n].suggestable = !0) } this._loadSuggestions(a, !1), this.loadedFiltered = !0 }, _ajaxLoadSuggestions: function (e) { var i = e, s = this; this.pendingFilterEvent && clearTimeout(this.pendingFilterEvent), this.pendingFilterEvent = setTimeout(function () { var e = ++s.ajaxRequestCount; t.ajax({ url: s.options.ajaxURL, type: "GET", data: { elementId: s.element.attr("id"), search: i }, dataType: "json", success: function (i) { if (e != s.ajaxRequestCount) return !1; t.each(s.tagsByID, function (t, e) { s._isAlreadyDisplayingTag(t) && (i[t] = e) }), s.tagsByID = i, s._loadSuggestions(i, !1), s.loadedFiltered = !0, s._showSuggestions(!1) }, error: function (t) { s.options.ajaxErrorFunction(s, t) } }), delete s.pendingFilterEvent }, this.options.typingTimeThreshold) }, _showMessageSuggestion: function (e, i) { this._setSuggestionListDimensions(this), this.taggerSuggestions.show(), this.taggerSuggestionsList.children().remove(), t("<li>").attr("role", "option").attr("aria-selected", "false").addClass("extra").addClass("message").addClass(i).text(e).appendTo(this.taggerSuggestionsList) }, _getVisibleInput: function () { return this.taggerFilterInput && this.taggerFilterInput.is(":visible") ? this.taggerFilterInput : this.taggerInput && this.taggerInput.is(":visible") ? this.taggerInput : this.taggerWidget }, _getWidgetFocusable: function () { return this.taggerInput && this.taggerInput.is(":visible") ? this.taggerInput : this.taggerWidget }, _updateInputAndFilter: function (t, e) { t.focus(), t.val(e), t === this.taggerInput && this._inputExpand(t), this._filterSuggestions(e, !1) }, _appendCharAndFilter: function (t) { if ("keypress" !== t.type) throw "Unhandled event type passed to _appendCharAndFilter(), expected keypress): " + t.type; var e = String.fromCharCode(t.charCode), i = this._getVisibleInput(), s = i.val() + e; this._updateInputAndFilter(i, s) }, _removeLastCharAndFilter: function (t) { var e = this._getVisibleInput(), i = e.val().substring(0, e.val().length - 1); this._updateInputAndFilter(e, i) }, _loadSuggestions: function (e, i) { this.taggerSuggestionsList.children().remove(); var s, a = t.map(e, function (t, e) { return [[e, t.sort]] }); this.options.sortedOutput && a.sort(function (t, e) { return void 0 === t[1] ? e[1] : void 0 === e[1] ? t[1] : t[1] - e[1] }); for (var n = 0; n < a.length; n++) { var g = e[a[n][0]]; !g.suggestable && !this.options.displayHierarchy || g.historical || !g.key || !g.id || !this.options.freeTextSuggest && g.freetext || this._createSuggestionsItem(g, i) } this.options.freeTextInput && this._getVisibleInput().val().length > 0 && (s = this.options.freeTextMessage ? this.options.freeTextMessage.replace(/%VALUE%/g, t("<div>").text(t.trim(this._getVisibleInput().val())).html()) : this._getVisibleInput().val(), t("<li>").attr("role", "option").attr("aria-selected", "false").addClass("extra").addClass("addfreetext").attr("tabindex", this.tabIndex).html(s).data("freetext", this._getVisibleInput().val()).bind("mouseup keyup keydown", t.proxy(this._handleSuggestionItemInteraction, this)).bind("mouseleave mouseenter blur focus", t.proxy(this._handleSuggestionItemFocus, this)).appendTo(this.taggerSuggestionsList)); 0 === a.length ? this.options.noSuggestText.length > 0 && this._getVisibleInput().val().length > 0 && t("<li>").attr("role", "option").attr("aria-selected", "false").addClass("extra").addClass("missing").text(this.options.noSuggestText).appendTo(this.taggerSuggestionsList) : 0 === this.taggerSuggestionsList.children().length && t("<li>").attr("role", "option").attr("aria-selected", "false").addClass("extra").addClass("missing").text(this.options.emptyListText).appendTo(this.taggerSuggestionsList), e.limited && t("<li>").attr("role", "option").attr("aria-selected", "false").addClass("extra").addClass("limited").text(this.options.limitedText).appendTo(this.taggerSuggestionsList) }, _createSuggestionsItem: function (e, i) { var s = t("<li>").attr("suggestion", "tag").attr("role", "option").attr("aria-selected", "false").appendTo(this.taggerSuggestionsList); e.suggestion && null !== e.suggestion && "" !== e.suggestion ? s.html(t("<div/>").html(e.suggestion).text()) : s.text(e.key), e.disabled ? (s.addClass("extra"), s.addClass("disabled")) : (s.attr("tabindex", this.tabIndex), s.bind("mouseup keyup keydown", t.proxy(this._handleSuggestionItemInteraction, this)), s.bind("mouseleave mouseenter blur focus", t.proxy(this._handleSuggestionItemFocus, this))), s.data("tagid", e.id), this.options.displayHierarchy && i && (e.level > 0 && s.css("padding-left", e.level * this.options.indentMultiplier + "em"), e.suggestable || (s.addClass("extra"), s.addClass("disabled"), s.unbind(), s.removeAttr("tabindex"))) }, _handleSuggestionItemInteraction: function (e) { if ("mouseup" !== e.type && "keyup" !== e.type && "keydown" !== e.type) throw "Unhandled event type passed to _handleSuggestionItemInteraction(), expected mouseup, keyup or keydown): " + e.type; var i = t(e.target).prevAll("li[tabindex]"), s = t(e.target).nextAll("li[tabindex]"); if ("mouseup" === e.type && e.which === this.mouseCodes.LEFT || "keydown" === e.type && e.which === this.keyCodes.ENTER) { var a = t(e.target).closest("li"); if (a.data("tagid") && !a.data("freetext")) this._addTagFromID(a.data("tagid")), this._selectionReset(!0, !0); else { if (!a.data("freetext") || a.data("tagid")) throw "Suggestion has both freetext and a tag id?"; this._addFreeText(a.data("freetext")), this._selectionReset(!0, !0) } e.preventDefault() } else "keydown" === e.type && (e.which === this.keyCodes.UP || e.which === this.keyCodes.TAB && e.shiftKey) ? (i.first().is("li") ? i.first().focus() : this.taggerFilterInput && this.taggerFilterInput.is(":visible") ? this.taggerFilterInput.focus() : this.taggerInput.focus(), e.preventDefault()) : "keydown" !== e.type || e.which !== this.keyCodes.DOWN && (e.which !== this.keyCodes.TAB || e.shiftKey) ? "keyup" === e.type && e.which === this.keyCodes.HOME ? i.last().is("li") && (i.last().focus(), e.preventDefault()) : "keyup" === e.type && e.which === this.keyCodes.END ? s.last().is("li") && (s.last().focus(), e.preventDefault()) : "keydown" === e.type && e.which === this.keyCodes.BACKSPACE && (this._removeLastCharAndFilter(e), e.preventDefault()) : s.first().is("li") && (s.first().focus(), e.preventDefault()) }, _handleSuggestionItemFocus: function (e) { "focus" === e.type ? t(e.target).addClass("focus") : "blur" === e.type ? t(e.target).removeClass("focus") : "mouseenter" === e.type ? (t(e.target).addClass("focus"), t(e.target).focus()) : "mouseleave" === e.type && (t(e.target).removeClass("focus"), t(e.target).blur()) }, _setSuggestionListDimensions: function (t) { null === t.options.suggestMaxWidth && null === t.options.suggestWidth ? t.taggerSuggestions.width(t.taggerWidget.innerWidth()) : null !== t.options.suggestWidth ? t.taggerSuggestions.width(t.options.suggestWidth) : null !== t.options.suggestMaxWidth && (t.taggerSuggestions.css("min-width", t.taggerWidget.innerWidth()), t.taggerSuggestions.css("max-width", t.options.suggestMaxWidth), jQuery.support.boxModel || (t.taggerSuggestions.width() < t.taggerWidget.innerWidth() ? t.taggerSuggestions.width(t.taggerWidget.innerWidth()) : t.taggerSuggestions.width() > t.options.suggestMaxWidth && t.taggerSuggestions.width(t.options.suggestMaxWidth))), null !== t.options.suggestMaxHeight && (t.taggerSuggestions.css("max-height", t.options.suggestMaxHeight), jQuery.support.boxModel || t.taggerSuggestions.height() > t.options.suggestMaxHeight && t.taggerSuggestions.height(t.options.suggestMaxHeight)) }, _filterSuggestions: function (t, e) { t.length >= this.options.characterThreshold ? this.options.ajaxURL ? this._ajaxLoadSuggestions(t) : (this.filterTags(t), this._showSuggestions(!1)) : this.loadedFiltered && (e && this._hideSuggestions(), this._loadSuggestions(this.tagsByID, !0), this.loadedFiltered = !1) }, _showSuggestions: function (e) { this._focusWidget(), this._setSuggestionListDimensions(this), this.taggerSuggestions.show(), this.taggerInput.attr("aria-expanded", "true"), this.singleValue && this.taggerFilterInput && 1 === this.tagCount ? this.taggerFilterInput.show() : this.taggerFilterInput && this.taggerFilterInput.hide(); var i = this, s = function () { i._loadSuggestions(i.tagsByID, !0), i.loadedFiltered = !1, e && i.taggerSuggestions.find("[tabindex]:visible").first().focus() }; 0 === this.taggerSuggestionsList.children().length ? t.map(this.tagsByID, function (t, e) { return e }).length > 300 ? (t("<li>").attr("role", "option").attr("aria-selected", "false").addClass("extra").addClass("missing").text("Loading...").appendTo(this.taggerSuggestionsList), setTimeout(s, 300)) : s() : e && this.taggerSuggestions.find("[tabindex]:visible").first().focus() }, _hideSuggestions: function () { this.taggerSuggestions.hide(), this.taggerInput.attr("aria-expanded", "false") }, _inputExpand: function (e) { var i = t('<span class="hiddenInputSpan"></span>').appendTo("body"); i.css({ fontSize: this.taggerInput.css("fontSize"), fontFamily: this.taggerInput.css("fontFamily"), fontWeight: this.taggerInput.css("fontWeight"), letterSpacing: this.taggerInput.css("letterSpacing") }), "" !== e.val() ? i.html(e.val().replace(/&/g, "&amp;").replace(/\s/g, "&nbsp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") + " ") : e.attr("placeholder") && "" !== e.attr("placeholder") && i.html(e.attr("placeholder").replace(/&/g, "&amp;").replace(/\s/g, "&nbsp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")), e.width(Math.min(e.parent().innerWidth() - this.taggerSuggestionsButton.outerWidth(), i.width() + this.options.inputExpandExtra)), i.remove() }, _selectionReset: function (t, e) { e && (this.taggerInput.val(""), this.taggerFilterInput && this.taggerFilterInput.val("")), this._inputExpand(this.taggerInput), this._loadSuggestions(this.tagsByID, !0), this.loadedFiltered = !1, this._getWidgetFocusable().focus(), t && this._hideSuggestions() }, _addTagFromID: function (e) { var i, s = this, a = this.tagsByID[e]; if (!this._isAlreadyDisplayingTag(e)) { if (this.singleValue) { var n = this.canFireActions; this.canFireActions = !1, t(".tag", this.taggerWidget).each(function () { s._removeTagByElem(t(this), !0, !0) }), t(".removetag", this.taggerWidget).each(function () { t(this).remove() }), this.canFireActions = n } if (this.readonly) (i = t('<div class="tag tag-readonly"></div>').prependTo(this.taggerWidget)).text(t("<div/>").html(a.key).text()), this.singleValue && i.addClass("tag-single"); else { t('option[value="' + e.replace(/"/g, '\\"') + '"]', this.element).length > 0 ? t('option[value="' + e.replace(/"/g, '\\"') + '"]', this.element).prop("selected", !0) : t("<option>").prop("selected", !0).val(e).text(t("<div>").html(a.key).text()).appendTo(this.element), i = t("<div>").addClass("tag").attr("tabindex", this.tabIndex).text(t("<div/>").html(a.key).text()).data("tagid", e).insertBefore(this.taggerInput), a.freetext && i.addClass("freetext"); var g = t('<span class="removetag hittarget" role="presentation"><img src="' + this.options.baseURL + this.options.imgRemove + '" alt="Deselect tag" /></span>'); console.log(g); var o = function () { if (s.taggerSuggestions.is(":visible")) { var t = s.taggerFilterInput && s.taggerFilterInput.val().length > 0; s._removeTagByElem(i, !1, !t), s._showSuggestions(!1), setTimeout(function () { g.remove(), s.taggerInput.focus(), t && s._updateInputAndFilter(s.taggerInput, s.taggerFilterInput.val()) }, 0) } else s._removeTagByElem(i, !1, !0), g.remove(), s.taggerInput.focus() }; g.bind("mouseup keyup", t.proxy(function (t) { switch (t.type) { case "mouseup": t.which === this.mouseCodes.LEFT && o(), t.preventDefault(); break; case "keyup": t.which === this.keyCodes.ENTER && o() } }, this)), g.bind("click", t.proxy(function (t) { o(), t.preventDefault() }, this)), i.bind("keydown", t.proxy(function (e) { if (e.which === this.keyCodes.BACKSPACE && (this._removeTagByElem(t(e.target), !1, !0), g && g.remove(), e.preventDefault(), this.taggerInput.focus()), e.which === this.keyCodes.LEFT) { var i = t(e.target).prev(".tag").get(0); i && i.focus() } if (e.which === this.keyCodes.RIGHT) { var s = t(e.target).next(".tag").get(0); s ? s.focus() : this.taggerInput.focus() } }, this)), this.singleValue ? (i.bind("click", function (t) { s._showSuggestions(s.singleValue && 1 === s.tagCount) }), this.taggerInput.hide(), i.addClass("tag-single"), this.singleValue && this.options.mandatorySelection || (g.addClass("removetag-single"), g.attr("tabindex", this.tabIndex), g.insertBefore(this.taggerSuggestionsButton))) : g.appendTo(i) } this.tagCount++, this.tagsByID[e].suggestable = !1, this.tagsByID[e].displaying = !0, this.canFireActions && this._fireOnChangeAction() } }, _addFreeText: function (e) { e = t("<div>").text(t.trim(e)).html(); var i = (this.options.freeTextPrefix ? this.options.freeTextPrefix : "") + e; this.tagsByID[i] = { id: i, key: e, hidden: "", level: 0, suggestable: !0, historical: !1, disabled: !1, sort: -1, freetext: !0 }, this._addTagFromID(i), delete this.tagsByID[i] }, _isAlreadyDisplayingTag: function (t) { return !(!this.tagsByID[t].displaying || !0 !== this.tagsByID[t].displaying) }, _removeTagByElem: function (e, i, s) { var a = e.data("tagid"); e.remove(), this.tagCount--, t('option[value="' + a + '"]', this.element).prop("selected", !1), this.singleValue && t(this.element).val([]), this.tagsByID[a] && (this.tagsByID[a].suggestable = !0, this.tagsByID[a].displaying = !1), this._selectionReset(i, s), this.singleValue && this.taggerInput.show(), this.canFireActions && this._fireOnChangeAction() }, _fireOnChangeAction: function () { this.element[0].onchange && setTimeout(t.proxy(this.element[0].onchange, this.element[0]), 0) } }) }(jQuery);