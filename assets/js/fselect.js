!function (e) { function t(e) { var t = e.find(".fs-option:not(.hidden)").length > 0; e.find(".fs-no-results").toggleClass("hidden", t) } function s(e) { e.find(".fs-option.hl").removeClass("hl"), e.find(".fs-search input").focus(), window.fSelect.idx = -1 } function n(e) { var t = e.find(".fs-options"), i = e.find(".fs-option.hl"), s = i.offset().top + t.scrollTop(), n = s + i.outerHeight(), l = t.offset().top + t.scrollTop(), o = l + t.outerHeight(); if (n > o) { var a = t.scrollTop() + n - o; t.scrollTop(a) } else if (s < l) { a = t.scrollTop() - l - s; t.scrollTop(a) } } function l(t) { if (void 0 === t && null != window.fSelect.active_el && (t = window.fSelect.active_el), void 0 !== t) { var i = window.fSelect.initial_values, s = t.find("select").val(); JSON.stringify(i) != JSON.stringify(s) && e(document).trigger("fs:closed", t) } e(".fs-wrap").removeClass("fs-open"), e(".fs-dropdown").addClass("hidden"), window.fSelect.active_el = null, window.fSelect.active_id = null, window.fSelect.last_choice = null } String.prototype.unaccented = function () { for (var e = [/[\300-\306]/g, /[\340-\346]/g, /[\310-\313]/g, /[\350-\353]/g, /[\314-\317]/g, /[\354-\357]/g, /[\322-\330]/g, /[\362-\370]/g, /[\331-\334]/g, /[\371-\374]/g, /[\321]/g, /[\361]/g, /[\307]/g, /[\347]/g], t = ["A", "a", "E", "e", "I", "i", "O", "o", "U", "u", "N", "n", "C", "c"], i = this, s = 0; s < e.length; s++)i = i.replace(e[s], t[s]); return i }, e.fn.fSelect = function (t) { if ("string" == typeof t) var i = t; else i = e.extend({ placeholder: "Select some options", numDisplayed: 3, overflowText: "{n} selected", searchText: "Search", noResultsText: "No results found", showSearch: !0, optionFormatter: !1 }, t); function s(t, i) { this.$select = e(t), this.settings = i, this.create() } return s.prototype = { create: function () { this.idx = 0, this.optgroup = 0, this.selected = [].concat(this.$select.val()), this.settings.multiple = this.$select.is("[multiple]"); var e = "", t = "", i = this.buildOptions(this.$select); this.settings.showSearch && (e = '<div class="fs-search"><input type="text" placeholder="' + this.settings.searchText + '" /></div>'), "" !== this.settings.noResultsText && (t = '<div class="fs-no-results hidden">' + this.settings.noResultsText + "</div>"); var s = '<div class="fs-label-wrap"><div class="fs-label"></div><span class="fs-arrow"></span></div>'; s = (s = (s += '<div class="fs-dropdown hidden">{search}{no-results}<div class="fs-options">' + i + "</div></div>").replace("{search}", e)).replace("{no-results}", t), this.$select.wrap('<div class="fs-wrap' + (this.settings.multiple ? " multiple" : "") + '" tabindex="-1" />'), this.$select.addClass("hidden"), this.$select.before(s), this.$wrap = this.$select.closest(".fs-wrap"), this.$wrap.data("id", window.fSelect.num_items), window.fSelect.num_items++, this.reloadDropdownLabel() }, reload: function () { this.destroy(), this.create() }, destroy: function () { this.$wrap.find(".fs-label-wrap").remove(), this.$wrap.find(".fs-dropdown").remove(), this.$select.unwrap().removeClass("hidden") }, buildOptions: function (t) { var i = this, s = ""; return t.children().each(function (t, n) { var l = e(n); if ("optgroup" == l.prop("nodeName").toLowerCase()) s += '<div class="fs-optgroup-label" data-group="' + i.optgroup + '">' + l.prop("label") + "</div>", s += i.buildOptions(l), i.optgroup++; else { var o = l.prop("value"), a = l.attr("class"); if (a = void 0 !== a ? " " + a : "", 0 < i.idx || "" != o || !i.settings.multiple) { var d = l.is(":disabled") ? " disabled" : "", c = '<div class="fs-option' + (-1 < e.inArray(o, i.selected) ? " selected" : "") + d + (" g" + i.optgroup) + a + '" data-value="' + o + '" data-index="' + i.idx + '"><span class="fs-checkbox"><i></i></span><div class="fs-option-label">' + l.html() + "</div></div>"; "function" == typeof i.settings.optionFormatter && (c = i.settings.optionFormatter(c)), s += c, i.idx++ } } }), s }, reloadDropdownLabel: function () { var t = this.settings, i = []; this.$wrap.find(".fs-option.selected").each(function (t, s) { i.push(e(s).find(".fs-option-label").html()) }), i = i.length < 1 ? t.placeholder : i.length > t.numDisplayed ? t.overflowText.replace("{n}", i.length) : i.join(", "), this.$wrap.find(".fs-label").html(i), this.$wrap.toggleClass("fs-default", i === t.placeholder) } }, this.each(function () { var t = e(this).data("fSelect"); t || (t = new s(this, i), e(this).data("fSelect", t)), "string" == typeof i && t[i]() }) }, window.fSelect = { num_items: 0, active_id: null, active_el: null, last_choice: null, idx: -1 }, e(document).on("click", ".fs-option:not(.hidden, .disabled)", function (t) { var s = e(this).closest(".fs-wrap"), n = s.find("select"), o = !1; if (!s.hasClass("fs-disabled")) { if (s.hasClass("multiple")) { var a = []; if (t.shiftKey && null != window.fSelect.last_choice) { var d = parseInt(e(this).attr("data-index")), c = !e(this).hasClass("selected"), f = Math.min(window.fSelect.last_choice, d), r = Math.max(window.fSelect.last_choice, d); for (i = f; i <= r; i++)s.find(".fs-option[data-index=" + i + "]").not(".hidden, .disabled").each(function () { e(this).toggleClass("selected", c) }) } else window.fSelect.last_choice = parseInt(e(this).attr("data-index")), e(this).toggleClass("selected"); s.find(".fs-option.selected").each(function (t, i) { a.push(e(i).attr("data-value")) }) } else { a = e(this).attr("data-value"); s.find(".fs-option").removeClass("selected"), e(this).addClass("selected"), o = !0 } n.val(a), n.fSelect("reloadDropdownLabel"), n.change(), e(document).trigger("fs:changed", s), o && l(s) } }), e(document).on("keyup", ".fs-search input", function (i) { if (40 != i.which) { var n = e(this).closest(".fs-wrap"), l = e(this).val().replace(/[|\\{}()[\]^$+*?.]/g, "\\$&"); n.find(".fs-option, .fs-optgroup-label").removeClass("hidden"), "" != l && (n.find(".fs-option").each(function () { var t = new RegExp(l.unaccented(), "gi"); null === e(this).find(".fs-option-label").text().unaccented().match(t) && e(this).addClass("hidden") }), n.find(".fs-optgroup-label").each(function () { var t = e(this).attr("data-group"); e(this).closest(".fs-options").find(".fs-option.g" + t + ":not(.hidden)").length < 1 && e(this).addClass("hidden") })), s(n), t(n) } else e(this).blur() }), e(document).on("click", function (i) { var n = e(i.target), o = n.closest(".fs-wrap"); 0 < o.length ? (o.data("id") !== window.fSelect.active_id && l(), (n.hasClass("fs-label") || n.hasClass("fs-arrow")) && (o.find(".fs-dropdown").hasClass("hidden") ? function (i) { window.fSelect.active_el = i, window.fSelect.active_id = i.data("id"), window.fSelect.initial_values = i.find("select").val(), e(document).trigger("fs:opened", i), i.find(".fs-dropdown").removeClass("hidden"), i.addClass("fs-open"), s(i), t(i) }(o) : l(o))) : l() }), e(document).on("keydown", function (t) { var i = window.fSelect.active_el, s = e(t.target); if (s.hasClass("fs-wrap")) { if (32 == t.which || 13 == t.which) return t.preventDefault(), void s.find(".fs-label").trigger("click") } else if (0 < s.closest(".fs-search").length) { if (32 == t.which) return } else if (null === i) return; if (38 == t.which) { t.preventDefault(), i.find(".fs-option.hl").removeClass("hl"); var o = (a = i.find(".fs-option[data-index=" + window.fSelect.idx + "]")).prevAll(".fs-option:not(.hidden, .disabled)"); o.length > 0 ? (window.fSelect.idx = parseInt(o.attr("data-index")), i.find(".fs-option[data-index=" + window.fSelect.idx + "]").addClass("hl"), n(i)) : (window.fSelect.idx = -1, i.find(".fs-search input").focus()) } else if (40 == t.which) { var a; if (t.preventDefault(), (a = i.find(".fs-option[data-index=" + window.fSelect.idx + "]")).length < 1) var d = i.find(".fs-option:not(.hidden, .disabled):first"); else d = a.nextAll(".fs-option:not(.hidden, .disabled)"); d.length > 0 && (window.fSelect.idx = parseInt(d.attr("data-index")), i.find(".fs-option.hl").removeClass("hl"), i.find(".fs-option[data-index=" + window.fSelect.idx + "]").addClass("hl"), n(i)) } else 32 == t.which || 13 == t.which ? (t.preventDefault(), i.find(".fs-option.hl").click()) : 27 == t.which && l(i) }) }(jQuery);