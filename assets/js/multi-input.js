class MultiInput extends HTMLElement { constructor() { super(), this.innerHTML += "<style>\n    multi-input input::-webkit-calendar-picker-indicator {\n      display: none;\n    }\n    /* NB use of pointer-events to only allow events from the × icon */\n    multi-input div.item::after {\n      color: black;\n      content: '×';\n      cursor: pointer;\n      font-size: 18px;\n      pointer-events: auto;\n      position: absolute;\n      right: 5px;\n      top: -1px;\n    }\n\n    </style>", this._shadowRoot = this.attachShadow({ mode: "open" }), this._shadowRoot.innerHTML = "<style>\n    :host {\n      border: var(--multi-input-border, 1px solid #ddd);\n      display: block;\n      overflow: hidden;\n      padding: 5px;\n    }\n    /* NB use of pointer-events to only allow events from the × icon */\n    ::slotted(div.item) {\n      background-color: var(--multi-input-item-bg-color, #dedede);\n      border: var(--multi-input-item-border, 1px solid #ccc);\n      border-radius: 2px;\n      color: #222;\n      display: inline-block;\n      font-size: var(--multi-input-item-font-size, 14px);\n      margin: 5px;\n      padding: 2px 25px 2px 5px;\n      pointer-events: none;\n      position: relative;\n      top: -1px;\n    }\n    /* NB pointer-events: none above */\n    ::slotted(div.item:hover) {\n      background-color: #eee;\n      color: black;\n    }\n    ::slotted(input) {\n      border: none;\n      font-size: var(--multi-input-input-font-size, 14px);\n      outline: none;\n      padding: 10px 10px 10px 5px; \n    }\n    </style>\n    <slot></slot>", this._datalist = this.querySelector("datalist"), this._allowedValues = []; for (const t of this._datalist.options) this._allowedValues.push(t.value); this._input = this.querySelector("input"), this._input.onblur = this._handleBlur.bind(this), this._input.oninput = this._handleInput.bind(this), this._input.onkeydown = (t => { this._handleKeydown(t) }), this._allowDuplicates = this.hasAttribute("allow-duplicates") } _addItem(t) { this._input.value = ""; const e = document.createElement("div"); if (e.classList.add("item"), e.textContent = t, this.insertBefore(e, this._input), e.onclick = (() => { this._deleteItem(e) }), !this._allowDuplicates) { for (const e of this._datalist.options) e.value === t && e.remove(); this._allowedValues = this._allowedValues.filter(e => e !== t) } } _deleteItem(t) { const e = t.textContent; if (t.remove(), !this._allowDuplicates) { const t = document.createElement("option"); t.value = e, this._datalist.insertBefore(t, this._datalist.firstChild), this._allowedValues.push(e) } } _handleBlur() { this._input.value = "" } _handleInput() { const t = this._input.value; this._allowedValues.includes(t) && this._addItem(t) } _handleKeydown(t) { const e = t.target.previousElementSibling, n = this._input.value; "" === n && "Backspace" === t.key && e ? this._deleteItem(e) : this._allowedValues.includes(n) && this._addItem(n) } getValues() { const t = [], e = this.querySelectorAll(".item"); for (const n of e) t.push(n.textContent); return t } } window.customElements.define("multi-input", MultiInput);